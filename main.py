import os
import logging
from fastapi import FastAPI, Request
from telegram import Update
from telegram.ext import (
    Application, ApplicationBuilder, CommandHandler,
    ContextTypes, MessageHandler, ConversationHandler, filters
)
import asyncio

# Logging
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO
)

# K√∂rnyezeti v√°ltoz√≥k
TOKEN = os.getenv("TELEGRAM_TOKEN")
WEBHOOK_URL = os.getenv("WEBHOOK_URL")

# FastAPI p√©ld√°ny
app = FastAPI()

# Adatok
fuvarok = [
    {"honnan": "Budapest", "hova": "Berlin", "mennyiseg": "20 raklap", "ar": "700"},
    {"honnan": "Gy≈ër", "hova": "M√ºnchen", "mennyiseg": "33 raklap", "ar": "680"},
    {"honnan": "Szeged", "hova": "Pr√°ga", "mennyiseg": "15 raklap", "ar": "550"},
    {"honnan": "Debrecen", "hova": "Wien", "mennyiseg": "20 raklap", "ar": "610"},
    {"honnan": "P√©cs", "hova": "Brno", "mennyiseg": "25 raklap", "ar": "590"},
    {"honnan": "Tatab√°nya", "hova": "G√ºntner Berlin", "mennyiseg": "30 raklap", "ar": "720"},
]

potkocsik = {f"{i+100}ABC": "√ºres" for i in range(10)}
vontatok = {f"{i+1000}XYZ": None for i in range(10)}
soforok = [f"Sof≈ër{i}" for i in range(1, 11)]

# √Ållapotok
(HONNAN, HOVA, MENNYI, AR) = range(4)

# Bot inicializ√°l√°s
bot_app: Application = ApplicationBuilder().token(TOKEN).build()


# Parancsok
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üöõ √údv√∂z√∂llek a Fuvartestbotn√°l!\n\n"
        "üìå El√©rhet≈ë parancsok:\n"
        "/ujfuvar ‚Äì √öj fuvar felt√∂lt√©se\n"
        "/fuvarlist ‚Äì Fuvarok list√°z√°sa\n"
        "/rendeles ‚Äì Fuvar r√©szletek\n"
        "/potkocsik ‚Äì P√≥tkocsik √°llapota\n"
        "/vontatok ‚Äì Vontat√≥k √°llapota\n"
        "/allapotvaltas ‚Äì P√≥tkocsi √°llapot v√°lt√°s\n"
        "/hozzarendeles ‚Äì Vontat√≥ hozz√°rendel√©s"
    )

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await start(update, context)

async def fuvarlist(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not fuvarok:
        await update.message.reply_text("Nincs el√©rhet≈ë fuvar.")
        return
    msg = "\n".join([
        f"{i+1}. {f['honnan']} ‚ûú {f['hova']} | {f['mennyiseg']} | {f['ar']} EUR"
        for i, f in enumerate(fuvarok)
    ])
    await update.message.reply_text(msg)

async def ujfuvar(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üìç Honnan indul a fuvar?")
    return HONNAN

async def honnan(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["honnan"] = update.message.text
    await update.message.reply_text("üèÅ Hov√° tart?")
    return HOVA

async def hova(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["hova"] = update.message.text
    await update.message.reply_text("üì¶ Milyen mennyis√©g (pl. 33 raklap)?")
    return MENNYI

async def mennyi(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["mennyiseg"] = update.message.text
    await update.message.reply_text("üí∞ Aj√°nlott d√≠j (EUR)?")
    return AR

async def ar(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["ar"] = update.message.text
    fuvarok.append(dict(context.user_data))
    await update.message.reply_text("‚úÖ Fuvar sikeresen r√∂gz√≠tve.")
    return ConversationHandler.END

async def rendeles(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not fuvarok:
        await update.message.reply_text("Nincs fuvar a list√°n.")
        return ConversationHandler.END
    await update.message.reply_text("üî¢ Melyik fuvar r√©szleteire vagy k√≠v√°ncsi? √çrd be a sz√°m√°t:")
    return 0

async def rendeles_valasz(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        idx = int(update.message.text) - 1
        f = fuvarok[idx]
        ai = "üí° J√≥ aj√°nlat!" if int(f['ar']) >= 600 else "‚ö†Ô∏è Alacsony d√≠j!"
        await update.message.reply_text(
            f"üì¶ Fuvar r√©szletek:\n"
            f"Honnan: {f['honnan']}\n"
            f"Hov√°: {f['hova']}\n"
            f"Mennyis√©g: {f['mennyiseg']}\n"
            f"Aj√°nlat: {f['ar']} EUR\n{ai}"
        )
    except:
        await update.message.reply_text("‚ùå Hib√°s sz√°m.")
    return ConversationHandler.END

async def potkocsik_allapot(update: Update, context: ContextTypes.DEFAULT_TYPE):
    msg = "\n".join([f"{rendszam}: {allapot}" for rendszam, allapot in potkocsik.items()])
    await update.message.reply_text(f"üöõ P√≥tkocsik:\n{msg}")

async def vontatok_allapot(update: Update, context: ContextTypes.DEFAULT_TYPE):
    msg = "\n".join([
        f"{v}: {p if p else 'nincs hozz√°rendelve'}"
        for v, p in vontatok.items()
    ])
    await update.message.reply_text(f"üöö Vontat√≥k:\n{msg}")

async def allapotvaltas(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("√çrd be a p√≥tkocsi rendsz√°m√°t:")
    return 1

async def allapotvaltas_valasz(update: Update, context: ContextTypes.DEFAULT_TYPE):
    rendszam = update.message.text
    if rendszam in potkocsik:
        if potkocsik[rendszam] == "√ºres":
            potkocsik[rendszam] = f"rakott / {fuvarok[-1]['hova']}"
        else:
            potkocsik[rendszam] = "√ºres"
        await update.message.reply_text(f"‚úÖ {rendszam} √°llapota: {potkocsik[rendszam]}")
    else:
        await update.message.reply_text("‚ùå Nem ismert rendsz√°m.")
    return ConversationHandler.END

async def hozzarendeles(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("Add meg a vontat√≥ √©s a p√≥tkocsi rendsz√°m√°t sz√≥k√∂zzel elv√°lasztva (pl. 1001XYZ 101ABC):")
    return 2

async def hozzarendeles_valasz(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        vontato, potkocsi = update.message.text.strip().split()
        if vontato in vontatok and potkocsi in potkocsik:
            vontatok[vontato] = potkocsi
            await update.message.reply_text(f"‚úÖ {vontato} hozz√°rendelve: {potkocsi}")
        else:
            await update.message.reply_text("‚ùå √ârv√©nytelen rendsz√°m.")
    except:
        await update.message.reply_text("‚ùå Form√°tumhiba. Pr√≥b√°ld √∫jra.")
    return ConversationHandler.END


# --- FastAPI webhook endpoint ---
@app.post("/")
async def telegram_webhook(req: Request):
    data = await req.json()
    update = Update.de_json(data, bot_app.bot)
    await bot_app.process_update(update)
    return {"ok": True}


# --- Fut√°s ---
async def main():
    bot_app.add_handler(CommandHandler("start", start))
    bot_app.add_handler(CommandHandler("help", help_command))
    bot_app.add_handler(CommandHandler("fuvarlist", fuvarlist))
    bot_app.add_handler(CommandHandler("potkocsik", potkocsik_allapot))
    bot_app.add_handler(CommandHandler("vontatok", vontatok_allapot))

    bot_app.add_handler(ConversationHandler(
        entry_points=[CommandHandler("ujfuvar", ujfuvar)],
        states={
            HONNAN: [MessageHandler(filters.TEXT & ~filters.COMMAND, honnan)],
            HOVA: [MessageHandler(filters.TEXT & ~filters.COMMAND, hova)],
            MENNYI: [MessageHandler(filters.TEXT & ~filters.COMMAND, mennyi)],
            AR: [MessageHandler(filters.TEXT & ~filters.COMMAND, ar)],
        },
        fallbacks=[]
    ))

    bot_app.add_handler(ConversationHandler(
        entry_points=[CommandHandler("rendeles", rendeles)],
        states={0: [MessageHandler(filters.TEXT & ~filters.COMMAND, rendeles_valasz)]},
        fallbacks=[]
    ))

    bot_app.add_handler(ConversationHandler(
        entry_points=[CommandHandler("allapotvaltas", allapotvaltas)],
        states={1: [MessageHandler(filters.TEXT & ~filters.COMMAND, allapotvaltas_valasz)]},
        fallbacks=[]
    ))

    bot_app.add_handler(ConversationHandler(
        entry_points=[CommandHandler("hozzarendeles", hozzarendeles)],
        states={2: [MessageHandler(filters.TEXT & ~filters.COMMAND, hozzarendeles_valasz)]},
        fallbacks=[]
    ))

    await bot_app.initialize()
    await bot_app.start()
    await bot_app.bot.set_webhook(url=WEBHOOK_URL)
    await bot_app.updater.start_polling()  # csak ideiglenes fallback, ha kell

if __name__ == "__main__":
    asyncio.run(main())
