import os
import logging
from telegram import Update
from telegram.ext import (
    ApplicationBuilder, CommandHandler,
    MessageHandler, ContextTypes, filters, ConversationHandler
)

# Napl√≥z√°s
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

BOT_TOKEN = os.getenv("TELEGRAM_TOKEN")

# Fuvar √©s j√°rm≈± adatok
fuvarok = []
potkocsik = {f"{i:03}{chr(65 + i%3)}{chr(66 + i%3)}{chr(67 + i%3)}": "√ºres" for i in range(1, 11)}
vontatok = {f"{1000+i}{chr(65 + i%5)}{chr(66 + i%4)}{chr(67 + i%3)}": None for i in range(1, 11)}

# √Ållapotok
(HONNAN, HOVA, MENNYI, AR) = range(4)

# Start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "√údv√∂z√∂llek! üöõ\n√ân vagyok a Fuvartestbot.\n\n"
        "üìã Haszn√°lhat√≥ parancsok:\n"
        "/help ‚Äì S√∫g√≥\n"
        "/fuvarlist ‚Äì El√©rhet≈ë fuvarok\n"
        "/ujfuvar ‚Äì √öj fuvar felt√∂lt√©se\n"
        "/potkocsik ‚Äì P√≥tkocsik √°llapota\n"
        "/vontatok ‚Äì Vontat√≥k √°llapota\n"
        "/rendeles ‚Äì Fuvar kiv√°laszt√°sa\n"
    )

# Help
async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üõ† El√©rhet≈ë parancsok:\n"
        "/start ‚Äì Ind√≠t√°s\n"
        "/help ‚Äì S√∫g√≥\n"
        "/fuvarlist ‚Äì El√©rhet≈ë fuvarok\n"
        "/ujfuvar ‚Äì Fuvaraj√°nlat bek√ºld√©se\n"
        "/potkocsik ‚Äì P√≥tkocsik √°llapotai (rakott/√ºres)\n"
        "/vontatok ‚Äì Vontat√≥k hozz√°rendel√©sei\n"
        "/rendeles ‚Äì R√©szletes inf√≥ k√©rt fuvarr√≥l"
    )

# Fuvarlista
async def fuvarlist(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not fuvarok:
        await update.message.reply_text("Nincs m√©g el√©rhet≈ë fuvar.")
        return
    msg = "üì¶ El√©rhet≈ë fuvarok:\n"
    for i, fuvar in enumerate(fuvarok, 1):
        msg += f"{i}. {fuvar['honnan']} ‚Üí {fuvar['hova']} | {fuvar['mennyiseg']} | {fuvar['ar']} EUR\n"
    await update.message.reply_text(msg)

# Fuvarfelvitel l√©p√©sei
async def ujfuvar(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üìç Honnan indul a fuvar?")
    return HONNAN

async def honnan(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["honnan"] = update.message.text
    await update.message.reply_text("üèÅ Hov√° tart?")
    return HOVA

async def hova(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["hova"] = update.message.text
    await update.message.reply_text("üì¶ Milyen mennyis√©g (pl. 12 raklap)?")
    return MENNYI

async def mennyi(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["mennyiseg"] = update.message.text
    await update.message.reply_text("üí∂ Mekkora az aj√°nlott d√≠j (EUR)?")
    return AR

async def ar(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["ar"] = update.message.text
    fuvarok.append(dict(context.user_data))
    await update.message.reply_text("‚úÖ Fuvar sikeresen r√∂gz√≠tve!")
    return ConversationHandler.END

# R√©szletek lek√©rdez√©se
async def rendeles(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not fuvarok:
        await update.message.reply_text("Nincs el√©rhet≈ë fuvar.")
        return
    msg = "Melyik fuvar √©rdekel? √çrd be a sz√°m√°t (pl. 1):"
    await update.message.reply_text(msg)
    return 0

async def rendeles_valasz(update: Update, context: ContextTypes.DEFAULT_TYPE):
    index = int(update.message.text) - 1
    if 0 <= index < len(fuvarok):
        fuvar = fuvarok[index]
        await update.message.reply_text(
            f"üìã R√©szletek:\n"
            f"Honnan: {fuvar['honnan']}\n"
            f"Hov√°: {fuvar['hova']}\n"
            f"Mennyis√©g: {fuvar['mennyiseg']}\n"
            f"Aj√°nlat: {fuvar['ar']} EUR\n"
            f"AI javaslat: {'J√≥ aj√°nlat' if int(fuvar['ar']) > 600 else 'Alacsony aj√°nlat'}"
        )
    else:
        await update.message.reply_text("‚ùå √ârv√©nytelen sorsz√°m.")
    return ConversationHandler.END

# P√≥tkocsik √°llapota
async def potkocsik_allapot(update: Update, context: ContextTypes.DEFAULT_TYPE):
    msg = "üöõ P√≥tkocsik √°llapota:\n"
    for rendszam, allapot in potkocsik.items():
        msg += f"{rendszam}: {allapot}\n"
    await update.message.reply_text(msg)

# Vontat√≥k √°llapota
async def vontatok_allapot(update: Update, context: ContextTypes.DEFAULT_TYPE):
    msg = "üöö Vontat√≥k √©s hozz√°rendelt p√≥tkocsik:\n"
    for rendszam, potko in vontatok.items():
        msg += f"{rendszam} ‚Üí {potko if potko else 'nincs hozz√°rendelve'}\n"
    await update.message.reply_text(msg)

# Fallback / kil√©p√©s
async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üö´ M≈±velet megszak√≠tva.")
    return ConversationHandler.END

# Echo fallback
async def echo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("Nem √©rtettem, haszn√°lj egy parancsot. (/help)")

# F≈ë program
if __name__ == "__main__":
    app = ApplicationBuilder().token(BOT_TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", help_command))
    app.add_handler(CommandHandler("fuvarlist", fuvarlist))
    app.add_handler(CommandHandler("potkocsik", potkocsik_allapot))
    app.add_handler(CommandHandler("vontatok", vontatok_allapot))

    app.add_handler(ConversationHandler(
        entry_points=[CommandHandler("ujfuvar", ujfuvar)],
        states={
            HONNAN: [MessageHandler(filters.TEXT & ~filters.COMMAND, honnan)],
            HOVA: [MessageHandler(filters.TEXT & ~filters.COMMAND, hova)],
            MENNYI: [MessageHandler(filters.TEXT & ~filters.COMMAND, mennyi)],
            AR: [MessageHandler(filters.TEXT & ~filters.COMMAND, ar)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    ))

    app.add_handler(ConversationHandler(
        entry_points=[CommandHandler("rendeles", rendeles)],
        states={0: [MessageHandler(filters.TEXT & ~filters.COMMAND, rendeles_valasz)]},
        fallbacks=[CommandHandler("cancel", cancel)],
    ))

    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, echo))

    app.run_polling()
